# Go
# Build your Go project.
# Add steps that test, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/go

trigger:
- pp_master

variables:
   major: 1
   minor: 0

name: $(major).$(minor)$(Rev:.r)

strategy:
  matrix:
    linux:
      poolName: 'Ubuntu_Pool'
      vmImage:
      osName: 'linux'
      ext: ''
      addldflags: ''
    windows:
      poolName: 'Windows_Pool'
      vmImage:
      osName: 'windows'
      ext: ".exe"
      addldflags: '-ldflags -H=windowsgui'
    mac:
      poolName: 'Azure Pipelines'
      vmImage: 'macOS-10.14'
      osName: 'mac'
      ext: ''
      addldflags: ''


pool:
  name: $(poolName)
  vmImage: $(vmImage)

steps:
- task: InstallSSHKey@0
  inputs:
    knownHostsEntry: 'ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H'
    sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDbFMfrNTVm6C6h03KPSO5QSdvkGpGVSZ5wvbklVJtB3XuhKb7urQYIp7zn/av5uRisJvpYJ3BWGXOfINHXPm/phBBXBR3zPFF6QZYqxFy50LVqeVPBUJpoxY+/SdipQFAs3CCTckVeQYmu3DDfuRVUMGJPljIeI2yqT8d1P3DuzmduCo+HwvBTQu6vOUaAiGLyAez4AnJqY+hFdub4RbUJq+7FrFlO02f+xDM8ZwEZqZ9grAJSpe/TiMgFDr2FNPwi5ZoTnF9Zztlsrir3foSafO61kEPGn/iajgDUrdLcKpw1oeDqLj+bijP8YVbUjoW7/GMTPOI7zPyirBqsokI62mPNsn5uGmoNR5IUd7SjZveB5bI/hWVVn47JOrxW1Csybu/TblMSRpFtmXNRpBoHiG6dBqTNiIeI1KK8+UTvw7vBVLGMnpvjKZDtC3DnRA493TVecU5/TQOdBNObGtGaJdNBhAagTj2eZfRxjBC3iywymvQZozsDJz/bFIefRV8= alex@alex-VB'
    sshKeySecureFile: 'key'
  displayName: "Create SSH files"

- task: GoTool@0
  inputs:
    version: '1.16.3'
  condition: eq(variables.osName, 'mac')

- script: |
    go version
    go env
  displayName: 'Checking Go installation'
- checkout: self 
  clean: true
  submodules: recursive
  displayName: 'Fetching all the changes'
- script: |
    go test -v ./... | true
  workingDirectory: $(Build.SourcesDirectory)/PaymentGateway
  displayName: 'Running all the tests'
  
- script: |
    go build -v -o payment-gateway$(ext) $(addldflags)  paidpiper.com/payment-gateway/cmd/main
  workingDirectory: $(Build.SourcesDirectory)/PaymentGateway
  displayName: 'Building Payment Gateway'

- task: ArchiveFiles@2
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)/PaymentGateway/payment-gateway$(ext)'
    includeRootFolder: true
    archiveType: '7z'
    sevenZipCompression: 'ultra'
    archiveFile: '$(Build.ArtifactStagingDirectory)/payment-gateway-$(osName)-$(Build.BuildNumber).7z'
    replaceExistingArchive: true
    verbose: true

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'payment-gateway'
    publishLocation: 'Container'

- task: Docker@1
  inputs:
    containerregistrytype: 'Azure Container Registry'
    azureSubscriptionEndpoint: 'U-BTech - CSP (Georest)(8a8eed1d-a101-45a3-bb4d-34065921a9aa)'
    azureContainerRegistry: 'torplusserviceregistry.azurecr.io'
    command: 'login'
  displayName: 'Docker login'
  condition: eq(variables.osName, 'linux')

- script: |
    make az_pipeline_push
  workingDirectory: $(Build.SourcesDirectory)/PaymentGateway/docker
  displayName: 'Docker build and push'
  condition: eq(variables.osName, 'linux')

- script: |
    make clean_up
  workingDirectory: $(Build.SourcesDirectory)/PaymentGateway/docker
  displayName: 'make clean_up'
  condition: eq(variables.osName, 'linux')
